// {\tableofcontents\clearpage\section{Specification}
// This is a program in which the user controls the character on screen 
// with the W,A,S,D keys. The character must dodge the obects falling from 
// above. The number of collisions will be recorded and used to calculate 
// a score. If the character successfully finishes the level, a new 
// screen will pop up with a new background (level two). For the next
// level,the number of falling objects will increase therefore making it 
// difficult to  dodge the falling objects. There will also be more objects
// falling with greater frequency.
// \\Input-keyboard presses
// \\Output-position of character changes
// \\Calculation - score based on number of collisions and levels reached.
// }
// generated by Fast Light User Interface Designer (fluid) version 1.0110

#ifndef labx_h
#define labx_h
#include <FL/Fl.H>
// {\clearpage\section{Analysis}
// We can capture the keyboard and respond to those events by moving the 
// character animation left and right. We can animate the character by 
// scrolling through different frames of the animation as the character moves.
// \\We can rain objects from the sky by increasing their Y value on a timer.
// \\Then we can detect collisions between the character and objects
// by checking the overlap in the X and Y values.
// \\If there is a collision detected we can record that into the score variable.
// \\On level 2 we can define where the characted can move based on X and Y
// values of the character and the X and Y values of the level structure.
// i.e. the character is not allowed to move over the creek and can move up
// only when overlapping with a ladder object.
// \\When the user passes a level we can record the score to a file.
// \\When the user finishes the game we can open up the score files and 
// pass then to a calculator function that will add them and return total.
// \\Lastly, labels can be added by drawing text. 
// }
// {\clearpage\section{Design}
// \begin{itemize}
// \item{Overlapping:
// \\When the x coordinate of one image's coners enter the x boundaries 
// of another image and the  coordinates enter the  y-boundaries, a 
// collision occurs.
// \\INPUT-coordinates of images A and B.
// \\OUTPUT-boolean result signifying collision of lack thereof}
// \item{Load images: This function uses a "for" loop to load the images for
// animations into memory.
// \\No input or output.}
// \item{Object animate:
// \\This function goes through a loop and displays sequential images that were
// loaded by the "Load Images" function to create an animation.
// \\No input or output.}
// \item{Overlapping Check:
// \\Passes the objects to the Overlapping function and if the return is positive,
// displays a message and writes the event into a file for keeping track of the
// score.
// \\INPUT: none
// \\OUTPUT: none
// }
// \item{Draw:
// \\Draws labels and shapes in the window.
// \\INPUT: none
// \\OUTPUT: none}
// \item{Handle:
// \\This function captures the events and filters out ones of interest based on 
// pre-defined criteria. Therefore, if an event matches a criteria, actions are 
// executed.
// \\INPUT :integer
// \\OUTPUT :integer}
// \item{Main:
// \\Calls the functions to load images and create the window.
// \\No inputs or outputs}
// \item{Randomize:
// \\This function receives a range of values within which it needs to generate
// a random value and returns said random value to the function that called this
// random function. The random values are generated using the time-based seed to
// prevent repetitive patterns within generation.
// \\INPUT: value range
// \\OUTPUT: random number within the given range.}
// \item{Score counter:
// \\Score counter keeps track of collisions between the character and falling objects.
// This score modifier is later subtracted from the base score and if total score
// reaches less than zero, death occurs.
// \\INPUT: user reaction to the game interface
// \\OUTPUT: Score modifier}
// \item{Ladders:
// \\The ladders function keeps track of collisions between ladder objects and character.
// When overlapping, the charater is allowed to move up on the screen onto raised platforms.
// When not overlapping, the character is allowed movement only in the horizontal 
// dimension.
// \\INPUT: Pointers to object B and A.
// \\OUTPUT: Boolean}
// \item{Score Calculator:
// \\The score calculator takes in the value of the score timer that increments the
// score based on time spent in the level and subtracts the value from the score modifier
// returning the current calculated score.
// \\INPUT: current score timer, score modifier.
// \\OUTPUT: final score.}
// \item{Score Timer:
// \\Score timer keeps track of the time spent in the level on which the
// base score is counted.
// \\INPUT: none.
// \\OUTPUT: base score}
// \item{Level up:
// \\Triggers the level to be redrawn to the next level when user finishes the current level
// by getting to the level-up object.
// \\INPUT: boolean event from level up object collision function.
// \\OUTPUT: none}
// \item{Score recorder:
// \\Records score at the end of the level to a file.
// \\INPUT: score.
// \\OUTPUT: none}
// \item{Final score:
// \\When current level score drops below zero due to too many objects hitting the 
// character, death occurs. This will trigger the final score calculation which
// will read the score file and add up all the scores from previous levels.
// \\INPUT: death boolean.
// \\OUTPUT: final score}
// \item{Death:
// \\Checks current score and when it reaches 0 or a negative number, ends game
// and displays the final score.
// \\INPUT: score.
// \\OUTPUT: none}
// \end{itemize}
// }
// {\clearpage\section{Implementation}
// }
#include <Fl/Fl_Double_Window.H>
#include <Fl/fl_draw.H>
#include <FL/Fl_Box.H>
void load_images();
int score_sum(int score1, int score2);
void level1_animate(void*);
void level2_animate(void*);
void char_animate_left(void*);
void char_animate_right(void*);
void leaf_animate(void*);
void level_up_animate(void*);
void shuriken_animate(void*);
bool overlapping(Fl_Box *a1, Fl_Box *a2);
void overlapping_check();
int random(int a, int b);

class Canvas : public Fl_Double_Window {
public:
  Canvas(int x,int y,int w,int h) ;
  void draw();
  int handle(int event);
};

class Level2 : public Fl_Double_Window {
public:
  Level2(int x,int y,int w,int h) ;
  int handle(int event);
};
#include <FL/Fl_Double_Window.H>
extern Fl_Double_Window *score_screen;
#include <FL/Fl_Box.H>
extern Fl_Box *final1;
extern Fl_Box *final2;
extern Fl_Box *finalTotal;
#include <FL/Fl_Value_Output.H>
extern Fl_Value_Output *final_score2;
extern Fl_Value_Output *final_score1;
extern Fl_Value_Output *final_total;
extern Level2 *level2_win;
extern Fl_Box *level2_back;
extern Fl_Box *character2;
extern Fl_Box *leaf2;
extern Fl_Box *level_up2;
extern Fl_Box *ladder1;
extern Fl_Box *ladder2;
extern Fl_Box *shuriken20;
extern Fl_Box *shuriken21;
extern Fl_Box *shuriken22;
extern Fl_Box *shuriken23;
extern Fl_Box *shuriken24;
#include <FL/Fl_Output.H>
extern Fl_Output *out_ouch2;
extern Fl_Value_Output *score_count2;
extern Canvas *win;
extern Fl_Box *level1_back;
extern Fl_Box *character;
extern Fl_Box *leaf;
extern Fl_Box *level_up;
extern Fl_Box *shuriken10;
extern Fl_Box *shuriken11;
extern Fl_Box *shuriken12;
extern Fl_Output *out_ouch;
extern Fl_Value_Output *score_count;
#endif
// {\clearpage\section{Test}
// Freshly started:\\
// \includegraphics {labx.png}\\
// Hit by a Star:\\
// \includegraphics {labx2.png}\\
// \clearpage Level 2:\\
// \includegraphics {labx3.png}\\
// On Top of the Bridge:\\
// \includegraphics {labx4.png}\\
// \clearpage Final Score Display:\\
// \includegraphics {labx6.png}\\
// }
